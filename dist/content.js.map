{"version":3,"file":"content.js","mappings":"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","sources":["webpack://earth-agent-ai-sdk/./src/content/index.ts"],"sourcesContent":["// Types\r\ninterface Message {\r\n  type: string;\r\n  payload?: any;\r\n}\r\n\r\n// Initialize content script\r\nfunction initialize() {\r\n  console.log('Earth Engine AI Assistant content script initialized');\r\n  \r\n  // --- Auto-search for the Console button and summary span on load ---\r\n  const xpath = '/html/body/ee-app-context/div/div[2]/div[1]/div/div[2]';\r\n  const containerNode = document.evaluate(\r\n    xpath,\r\n    document,\r\n    null,\r\n    XPathResult.FIRST_ORDERED_NODE_TYPE,\r\n    null\r\n  ).singleNodeValue;\r\n\r\n  const container = containerNode as HTMLElement | null;\r\n\r\n  if (container) {\r\n    // Find the \"Console\" button\r\n    const consoleButton = Array.from(container.querySelectorAll('button'))\r\n      .find(btn => (btn as HTMLButtonElement).textContent && (btn as HTMLButtonElement).textContent!.trim() === 'Console');\r\n    // Find the summary span\r\n    const summarySpan = container.querySelector('span.summary');\r\n\r\n    if (consoleButton) {\r\n      console.log('Found Console button:', consoleButton);\r\n    } else {\r\n      console.log('Console button not found');\r\n    }\r\n\r\n    if (summarySpan) {\r\n      console.log('Found summary span:', summarySpan, 'Text:', summarySpan.textContent);\r\n    } else {\r\n      console.log('Summary span not found');\r\n    }\r\n  } else {\r\n    console.log('Container not found for the given XPath');\r\n  }\r\n  // --- End auto-search ---\r\n\r\n  // Send initialization message to background script\r\n  chrome.runtime.sendMessage({ type: 'INIT' }, (response) => {\r\n    console.log('Initialization response:', response);\r\n  });\r\n\r\n  // Set up message listener\r\n  chrome.runtime.onMessage.addListener((message: Message, sender, sendResponse) => {\r\n    console.log('Content script received message:', message);\r\n\r\n    switch (message.type) {\r\n      case 'GET_EDITOR_CONTENT':\r\n        // TODO: Implement editor content retrieval\r\n        sendResponse({ content: 'Not implemented yet' });\r\n        break;\r\n      case 'GET_SUMMARY_SPAN': {\r\n        // Updated XPath to the Console tab container\r\n        const xpath = \"/html/body/ee-app-context/div/div[2]/div[1]/div/div[2]/div/ee-tab-panel/ee-tab[2]\";\r\n        const container = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue as HTMLElement | null;\r\n        let summaryText = '';\r\n        if (container) {\r\n          // Look for a span with class 'summary'\r\n          const summarySpan = container.querySelector('span.summary');\r\n          if (summarySpan) {\r\n            summaryText = summarySpan.textContent || '';\r\n          } else {\r\n            summaryText = 'Wrong direction';\r\n          }\r\n        } else {\r\n          summaryText = 'Wrong direction';\r\n        }\r\n        sendResponse({ summary: summaryText });\r\n        break;\r\n      }\r\n      default:\r\n        console.warn('Unknown message type:', message.type);\r\n        sendResponse({ error: 'Unknown message type' });\r\n    }\r\n\r\n    return true; // Will respond asynchronously\r\n  });\r\n}\r\n\r\n// Start initialization when the page is ready\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', initialize);\r\n} else {\r\n  initialize();\r\n} "],"names":[],"sourceRoot":""}