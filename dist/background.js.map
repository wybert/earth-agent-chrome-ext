{"version":3,"file":"background.js","mappings":"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","sources":["webpack://earth-agent-ai-sdk/./src/background/routes.ts","webpack://earth-agent-ai-sdk/webpack/bootstrap","webpack://earth-agent-ai-sdk/webpack/runtime/define property getters","webpack://earth-agent-ai-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://earth-agent-ai-sdk/webpack/runtime/make namespace object","webpack://earth-agent-ai-sdk/./src/background/index.ts"],"sourcesContent":["import { Message } from 'ai';\n\n// Earth Engine system prompt with domain expertise\nconst GEE_SYSTEM_PROMPT = `You are Earth Engine Assistant, an AI specialized in Google Earth Engine (GEE) geospatial analysis.\n\nYour capabilities:\n- Provide code examples for GEE tasks like image processing, classification, and visualization\n- Explain Earth Engine concepts, APIs, and best practices\n- Help troubleshoot Earth Engine code issues\n- Recommend appropriate datasets and methods for geospatial analysis\n\nInstructions:\n- Always provide code within backticks: \\`code\\`\n- Format Earth Engine code with proper JavaScript/Python syntax\n- When suggesting large code blocks, include comments explaining key steps\n- Cite specific Earth Engine functions and methods when relevant\n- For complex topics, break down explanations step-by-step\n- If you're unsure about something, acknowledge limitations rather than providing incorrect information\n\nCommon Earth Engine patterns:\n- Image and collection loading: ee.Image(), ee.ImageCollection()\n- Filtering: .filterDate(), .filterBounds()\n- Reducing: .reduce(), .mean(), .median()\n- Visualization: Map.addLayer(), ui.Map(), ui.Chart()\n- Classification: .classify(), ee.Classifier.randomForest()\n- Exporting: Export.image.toDrive(), Export.table.toAsset()\n\nSpeak in a helpful, educational tone while providing practical guidance for Earth Engine tasks.`;\n\n// Route handler for /api/chat\nexport async function handleChatRoute(request: Request): Promise<Response> {\n  try {\n    const { messages, apiKey, provider } = await request.json();\n    \n    if (!apiKey) {\n      return new Response(JSON.stringify({ error: 'API key not configured' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    if (!messages || !Array.isArray(messages) || messages.length === 0) {\n      return new Response(JSON.stringify({ error: 'No messages provided' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Stream response based on the provider\n    let responseStream: ReadableStream;\n    \n    if (provider === 'openai') {\n      responseStream = await streamOpenAIResponse(apiKey, messages);\n    } else if (provider === 'anthropic') {\n      responseStream = await streamAnthropicResponse(apiKey, messages);\n    } else {\n      return new Response(JSON.stringify({ error: 'Unsupported API provider' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Create a streamText-compatible response\n    return new Response(responseStream, {\n      headers: {\n        'Content-Type': 'text/plain; charset=utf-8',\n        'X-Content-Type-Options': 'nosniff',\n        'Cache-Control': 'no-store',\n      }\n    });\n  } catch (error: any) {\n    console.error('Chat API error:', error);\n    return new Response(JSON.stringify({ error: error.message || 'An error occurred' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Stream API for OpenAI\nasync function streamOpenAIResponse(apiKey: string, messages: Message[]): Promise<ReadableStream> {\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${apiKey}`\n    },\n    body: JSON.stringify({\n      model: 'gpt-4o',\n      messages: [\n        { role: 'system', content: GEE_SYSTEM_PROMPT },\n        ...messages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }))\n      ],\n      temperature: 0.2,\n      stream: true,\n    })\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error?.message || 'Error calling OpenAI API');\n  }\n\n  // Direct passthrough of the streaming response\n  return response.body as ReadableStream;\n}\n\n// Stream API for Anthropic\nasync function streamAnthropicResponse(apiKey: string, messages: Message[]): Promise<ReadableStream> {\n  const response = await fetch('https://api.anthropic.com/v1/messages', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': apiKey,\n      'anthropic-version': '2023-06-01',\n      'Accept': 'text/event-stream' \n    },\n    body: JSON.stringify({\n      model: 'claude-3-haiku-20240307',\n      max_tokens: 4000,\n      system: GEE_SYSTEM_PROMPT,\n      messages: messages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      })),\n      temperature: 0.2,\n      stream: true,\n    })\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.error?.message || 'Error calling Anthropic API');\n  }\n\n  // Direct passthrough of the streaming response\n  return response.body as ReadableStream;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { handleChatRoute } from './routes';\n\n// Types for messages between components\ninterface Message {\n  type: string;\n  payload?: any;\n}\n\n// Handle extension icon click\nchrome.action.onClicked.addListener(async (tab) => {\n  // Only open side panel if we're on the Earth Engine Code Editor\n  if (tab.url?.startsWith('https://code.earthengine.google.com/')) {\n    // Open the side panel\n    await chrome.sidePanel.open({ windowId: tab.windowId });\n    await chrome.sidePanel.setOptions({\n      enabled: true,\n      path: 'sidepanel.html'\n    });\n  } else {\n    // If not on Earth Engine, create a new tab with Earth Engine\n    await chrome.tabs.create({\n      url: 'https://code.earthengine.google.com/'\n    });\n  }\n});\n\n// Validate server identity with better error handling\nasync function validateServerIdentity(host: string, port: number): Promise<boolean> {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\n    \n    const response = await fetch(`http://${host}:${port}/.identity`, {\n      signal: controller.signal,\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      console.error(`Invalid server response: ${response.status}`);\n      return false;\n    }\n\n    const identity = await response.json();\n\n    // Validate the server signature\n    if (identity && identity.signature === \"mcp-browser-connector-24x7\") {\n      return true;\n    } else {\n      console.error(\"Invalid server signature - not the browser tools server\");\n      return false;\n    }\n  } catch (error) {\n    // Handle network errors more gracefully\n    console.error(\"Error validating server identity:\", error);\n    \n    // Don't throw an error, just return false if we can't connect\n    return false;\n  }\n}\n\n// Handle messages from content script or side panel\nchrome.runtime.onMessage.addListener((message: Message, sender, sendResponse) => {\n  console.log('Background script received message:', message);\n\n  switch (message.type) {\n    case 'INIT':\n      // Handle initialization\n      sendResponse({ status: 'initialized' });\n      break;\n    \n    case 'VALIDATE_SERVER':\n      if (message.payload && message.payload.host && message.payload.port) {\n        validateServerIdentity(message.payload.host, message.payload.port)\n          .then(isValid => {\n            sendResponse({ isValid });\n          })\n          .catch(error => {\n            sendResponse({ isValid: false, error: error.message });\n          });\n        return true; // Will respond asynchronously\n      }\n      break;\n      \n    case 'API_REQUEST':\n      // Handle API requests directly\n      if (message.payload && message.payload.endpoint === '/api/chat') {\n        handleChatRoute(new Request(message.payload.url, {\n          method: 'POST',\n          headers: message.payload.headers || {},\n          body: message.payload.body ? JSON.stringify(message.payload.body) : undefined\n        }))\n          .then(response => {\n            response.json().then(data => {\n              sendResponse({ success: true, data });\n            });\n          })\n          .catch(error => {\n            sendResponse({ success: false, error: error.message });\n          });\n        return true; // Will respond asynchronously\n      }\n      break;\n    \n    default:\n      console.warn('Unknown message type:', message.type);\n      sendResponse({ error: 'Unknown message type' });\n  }\n\n  // Return true to indicate we will send a response asynchronously\n  return true;\n});\n\n// Listen for side panel connections\nchrome.runtime.onConnect.addListener((port) => {\n  if (port.name === 'sidepanel') {\n    console.log('Side panel connected');\n    \n    port.onMessage.addListener(async (message: any) => {\n      console.log('Received message from side panel:', message);\n      \n      // Handle side panel specific messages\n      switch (message.type) {\n        case 'INIT':\n          port.postMessage({ type: 'INIT_RESPONSE', status: 'initialized' });\n          break;\n          \n        case 'CHAT_MESSAGE':\n          // Handle chat messages from side panel\n          handleChatMessage(message, port);\n          break;\n          \n        default:\n          console.warn('Unknown side panel message type:', message.type);\n          port.postMessage({ type: 'ERROR', error: 'Unknown message type' });\n      }\n    });\n\n    port.onDisconnect.addListener(() => {\n      console.log('Side panel disconnected');\n    });\n  }\n});\n\n// Helper function to handle chat messages\nasync function handleChatMessage(message: any, port: chrome.runtime.Port) {\n  try {\n    const requestId = Date.now().toString();\n    \n    // Instead of trying to use fetch to an API endpoint within the extension,\n    // directly call the handler function with properly formatted request\n    const body = {\n      messages: [{\n        role: 'user',\n        content: message.message\n      }],\n      apiKey: message.apiKey,\n      provider: message.provider\n    };\n    \n    // Create a request object for the handler\n    const request = new Request('chrome-extension://internal/api/chat', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${message.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n\n    try {\n      // Call the handler directly instead of using fetch\n      const response = await handleChatRoute(request);\n      \n      if (response.headers.get('Content-Type')?.includes('text/plain')) {\n        // Handle streaming response\n        const reader = response.body?.getReader();\n        const decoder = new TextDecoder();\n        \n        if (reader) {\n          try {\n            let accumulatedText = '';\n            let buffer = '';\n            \n            while (true) {\n              const { done, value } = await reader.read();\n              \n              if (done) {\n                console.log('Stream finished, accumulated text:', accumulatedText.length > 100 ? \n                  accumulatedText.substring(0, 100) + '...' : accumulatedText);\n                \n                // Send final message with complete text in a format the frontend can use\n                port.postMessage({ \n                  type: 'CHAT_RESPONSE',\n                  requestId,\n                  response: accumulatedText,  // Add direct response field\n                  fullText: accumulatedText,  // Also include as fullText (backup)\n                  data: {\n                    choices: [{\n                      message: {\n                        content: accumulatedText\n                      }\n                    }]\n                  }\n                });\n                \n                // Also send end of stream message\n                port.postMessage({\n                  type: 'CHAT_STREAM_END',\n                  requestId,\n                  response: accumulatedText,  // Add response field here too\n                  fullText: accumulatedText   // And fullText\n                });\n                \n                break;\n              }\n              \n              // Decode the chunk with proper streaming setup\n              buffer += decoder.decode(value, { stream: true });\n              \n              // Process SSE format\n              const lines = buffer.split('\\n');\n              buffer = lines.pop() || ''; // Keep the last (potentially incomplete) line in the buffer\n              \n              for (const line of lines) {\n                if (line.startsWith('data: ')) {\n                  const data = line.slice(5); // Remove 'data: ' prefix\n                  \n                  // Handle [DONE] message\n                  if (data.trim() === '[DONE]') {\n                    // This is just a stream completion marker, no need to parse it\n                    console.log('Stream completed with [DONE] marker');\n                    continue;\n                  }\n                  \n                  try {\n                    // Only try to parse if it's not the [DONE] marker\n                    const parsedData = JSON.parse(data);\n                    \n                    // Extract content from OpenAI response format\n                    if (parsedData.choices && parsedData.choices.length > 0) {\n                      const delta = parsedData.choices[0].delta;\n                      \n                      if (delta && delta.content) {\n                        const content = delta.content;\n                        accumulatedText += content;\n                        \n                        // Send only the actual content as a chunk\n                        port.postMessage({ \n                          type: 'CHAT_STREAM_CHUNK',\n                          requestId,\n                          chunk: content \n                        });\n                      }\n                    } \n                    // Handle Anthropic format (if needed)\n                    else if (parsedData.type === 'content_block_delta' && parsedData.delta && parsedData.delta.text) {\n                      const content = parsedData.delta.text;\n                      accumulatedText += content;\n                      \n                      port.postMessage({ \n                        type: 'CHAT_STREAM_CHUNK',\n                        requestId,\n                        chunk: content \n                      });\n                    }\n                  } catch (error) {\n                    console.warn('Error parsing SSE data:', error);\n                    // If parsing fails, ignore this line\n                  }\n                }\n              }\n            }\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            console.error('Error reading stream:', errorMessage);\n            port.postMessage({ \n              type: 'ERROR',\n              requestId,\n              error: errorMessage \n            });\n          }\n        }\n      } else {\n        // Handle JSON response\n        const data = await response.json();\n        port.postMessage({ \n          type: 'CHAT_RESPONSE',\n          requestId,\n          data \n        });\n      }\n    } catch (error) {\n      console.error('Error processing chat:', error);\n      \n      // Use fallback mode\n      const fallbackContent = \"I'm having trouble connecting to the API. Let me use my fallback mode to help you with Earth Engine.\\n\\n\" + \n                   generateFallbackResponse(message.message);\n      \n      const fallbackResponse = {\n        type: 'CHAT_RESPONSE',\n        requestId,\n        response: fallbackContent,  // Add direct response field\n        fullText: fallbackContent,  // Add fullText field\n        data: {\n          choices: [{\n            message: {\n              content: fallbackContent\n            }\n          }]\n        }\n      };\n      \n      port.postMessage(fallbackResponse);\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error('Chat processing error:', errorMessage);\n    port.postMessage({ \n      type: 'ERROR',\n      requestId: Date.now().toString(),\n      error: errorMessage \n    });\n  }\n}\n\n// Generate a fallback response for Earth Engine queries\nfunction generateFallbackResponse(query: string): string {\n  const keywords: Record<string, string> = {\n    'ndvi': 'NDVI (Normalized Difference Vegetation Index) can be calculated using: ```\\nvar ndvi = image.normalizedDifference([\"NIR\", \"RED\"]);\\n```',\n    'landsat': 'Landsat imagery can be accessed via: ```\\nvar landsat = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\")\\n```',\n    'sentinel': 'Sentinel imagery is available through: ```\\nvar sentinel = ee.ImageCollection(\"COPERNICUS/S2_SR\")\\n```',\n    'export': 'You can export images using Export.image.toDrive() or visualize them with Map.addLayer()',\n    'classify': 'For classification, use ee.Classifier methods like randomForest() or smileCart()',\n    'reducer': 'Reducers like mean(), sum(), or min() can aggregate data spatially or temporally'\n  };\n  \n  // Check if any keywords are in the query\n  for (const [key, response] of Object.entries(keywords)) {\n    if (query.toLowerCase().includes(key)) {\n      return response;\n    }\n  }\n  \n  // Default response\n  return \"I can help with Earth Engine tasks like image processing, classification, and data export. Could you provide more details about what you're trying to do?\";\n}"],"names":[],"sourceRoot":""}